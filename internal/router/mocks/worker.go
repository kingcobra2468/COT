// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	service "github.com/kingcobra2468/cot/internal/service"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields:
func (_m *Worker) Fetch() *[]service.UserInput {
	ret := _m.Called()

	var r0 *[]service.UserInput
	if rf, ok := ret.Get(0).(func() *[]service.UserInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]service.UserInput)
		}
	}

	return r0
}

// Worker_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type Worker_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
func (_e *Worker_Expecter) Fetch() *Worker_Fetch_Call {
	return &Worker_Fetch_Call{Call: _e.mock.On("Fetch")}
}

func (_c *Worker_Fetch_Call) Run(run func()) *Worker_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_Fetch_Call) Return(_a0 *[]service.UserInput) *Worker_Fetch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Fetch_Call) RunAndReturn(run func() *[]service.UserInput) *Worker_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// LoopBack provides a mock function with given fields:
func (_m *Worker) LoopBack() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Worker_LoopBack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoopBack'
type Worker_LoopBack_Call struct {
	*mock.Call
}

// LoopBack is a helper method to define mock.On call
func (_e *Worker_Expecter) LoopBack() *Worker_LoopBack_Call {
	return &Worker_LoopBack_Call{Call: _e.mock.On("LoopBack")}
}

func (_c *Worker_LoopBack_Call) Run(run func()) *Worker_LoopBack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_LoopBack_Call) Return(_a0 bool) *Worker_LoopBack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_LoopBack_Call) RunAndReturn(run func() bool) *Worker_LoopBack_Call {
	_c.Call.Return(run)
	return _c
}

// Recipient provides a mock function with given fields:
func (_m *Worker) Recipient() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Worker_Recipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recipient'
type Worker_Recipient_Call struct {
	*mock.Call
}

// Recipient is a helper method to define mock.On call
func (_e *Worker_Expecter) Recipient() *Worker_Recipient_Call {
	return &Worker_Recipient_Call{Call: _e.mock.On("Recipient")}
}

func (_c *Worker_Recipient_Call) Run(run func()) *Worker_Recipient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_Recipient_Call) Return(_a0 string) *Worker_Recipient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Recipient_Call) RunAndReturn(run func() string) *Worker_Recipient_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: message
func (_m *Worker) Send(message string) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Worker_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - message string
func (_e *Worker_Expecter) Send(message interface{}) *Worker_Send_Call {
	return &Worker_Send_Call{Call: _e.mock.On("Send", message)}
}

func (_c *Worker_Send_Call) Run(run func(message string)) *Worker_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Worker_Send_Call) Return(_a0 error) *Worker_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Send_Call) RunAndReturn(run func(string) error) *Worker_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
