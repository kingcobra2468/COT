// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	gvoice "github.com/kingcobra2468/cot/internal/router/worker/gvoice"

	mock "github.com/stretchr/testify/mock"
)

// GVoiceClient is an autogenerated mock type for the GVoiceClient type
type GVoiceClient struct {
	mock.Mock
}

type GVoiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GVoiceClient) EXPECT() *GVoiceClient_Expecter {
	return &GVoiceClient_Expecter{mock: &_m.Mock}
}

// GetContactHistory provides a mock function with given fields: ctx, in, opts
func (_m *GVoiceClient) GetContactHistory(ctx context.Context, in *gvoice.FetchContactHistoryRequest, opts ...grpc.CallOption) (*gvoice.FetchContactHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gvoice.FetchContactHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.FetchContactHistoryRequest, ...grpc.CallOption) (*gvoice.FetchContactHistoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.FetchContactHistoryRequest, ...grpc.CallOption) *gvoice.FetchContactHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gvoice.FetchContactHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gvoice.FetchContactHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GVoiceClient_GetContactHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactHistory'
type GVoiceClient_GetContactHistory_Call struct {
	*mock.Call
}

// GetContactHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gvoice.FetchContactHistoryRequest
//   - opts ...grpc.CallOption
func (_e *GVoiceClient_Expecter) GetContactHistory(ctx interface{}, in interface{}, opts ...interface{}) *GVoiceClient_GetContactHistory_Call {
	return &GVoiceClient_GetContactHistory_Call{Call: _e.mock.On("GetContactHistory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GVoiceClient_GetContactHistory_Call) Run(run func(ctx context.Context, in *gvoice.FetchContactHistoryRequest, opts ...grpc.CallOption)) *GVoiceClient_GetContactHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gvoice.FetchContactHistoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *GVoiceClient_GetContactHistory_Call) Return(_a0 *gvoice.FetchContactHistoryResponse, _a1 error) *GVoiceClient_GetContactHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GVoiceClient_GetContactHistory_Call) RunAndReturn(run func(context.Context, *gvoice.FetchContactHistoryRequest, ...grpc.CallOption) (*gvoice.FetchContactHistoryResponse, error)) *GVoiceClient_GetContactHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetContactList provides a mock function with given fields: ctx, in, opts
func (_m *GVoiceClient) GetContactList(ctx context.Context, in *gvoice.FetchContactListRequest, opts ...grpc.CallOption) (*gvoice.FetchContactListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gvoice.FetchContactListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.FetchContactListRequest, ...grpc.CallOption) (*gvoice.FetchContactListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.FetchContactListRequest, ...grpc.CallOption) *gvoice.FetchContactListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gvoice.FetchContactListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gvoice.FetchContactListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GVoiceClient_GetContactList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactList'
type GVoiceClient_GetContactList_Call struct {
	*mock.Call
}

// GetContactList is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gvoice.FetchContactListRequest
//   - opts ...grpc.CallOption
func (_e *GVoiceClient_Expecter) GetContactList(ctx interface{}, in interface{}, opts ...interface{}) *GVoiceClient_GetContactList_Call {
	return &GVoiceClient_GetContactList_Call{Call: _e.mock.On("GetContactList",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GVoiceClient_GetContactList_Call) Run(run func(ctx context.Context, in *gvoice.FetchContactListRequest, opts ...grpc.CallOption)) *GVoiceClient_GetContactList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gvoice.FetchContactListRequest), variadicArgs...)
	})
	return _c
}

func (_c *GVoiceClient_GetContactList_Call) Return(_a0 *gvoice.FetchContactListResponse, _a1 error) *GVoiceClient_GetContactList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GVoiceClient_GetContactList_Call) RunAndReturn(run func(context.Context, *gvoice.FetchContactListRequest, ...grpc.CallOption) (*gvoice.FetchContactListResponse, error)) *GVoiceClient_GetContactList_Call {
	_c.Call.Return(run)
	return _c
}

// GetGVoiceNumbers provides a mock function with given fields: ctx, in, opts
func (_m *GVoiceClient) GetGVoiceNumbers(ctx context.Context, in *gvoice.FetchGVoiceNumbersRequest, opts ...grpc.CallOption) (*gvoice.FetchGVoiceNumbersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gvoice.FetchGVoiceNumbersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.FetchGVoiceNumbersRequest, ...grpc.CallOption) (*gvoice.FetchGVoiceNumbersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.FetchGVoiceNumbersRequest, ...grpc.CallOption) *gvoice.FetchGVoiceNumbersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gvoice.FetchGVoiceNumbersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gvoice.FetchGVoiceNumbersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GVoiceClient_GetGVoiceNumbers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGVoiceNumbers'
type GVoiceClient_GetGVoiceNumbers_Call struct {
	*mock.Call
}

// GetGVoiceNumbers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gvoice.FetchGVoiceNumbersRequest
//   - opts ...grpc.CallOption
func (_e *GVoiceClient_Expecter) GetGVoiceNumbers(ctx interface{}, in interface{}, opts ...interface{}) *GVoiceClient_GetGVoiceNumbers_Call {
	return &GVoiceClient_GetGVoiceNumbers_Call{Call: _e.mock.On("GetGVoiceNumbers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GVoiceClient_GetGVoiceNumbers_Call) Run(run func(ctx context.Context, in *gvoice.FetchGVoiceNumbersRequest, opts ...grpc.CallOption)) *GVoiceClient_GetGVoiceNumbers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gvoice.FetchGVoiceNumbersRequest), variadicArgs...)
	})
	return _c
}

func (_c *GVoiceClient_GetGVoiceNumbers_Call) Return(_a0 *gvoice.FetchGVoiceNumbersResponse, _a1 error) *GVoiceClient_GetGVoiceNumbers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GVoiceClient_GetGVoiceNumbers_Call) RunAndReturn(run func(context.Context, *gvoice.FetchGVoiceNumbersRequest, ...grpc.CallOption) (*gvoice.FetchGVoiceNumbersResponse, error)) *GVoiceClient_GetGVoiceNumbers_Call {
	_c.Call.Return(run)
	return _c
}

// SendSMS provides a mock function with given fields: ctx, in, opts
func (_m *GVoiceClient) SendSMS(ctx context.Context, in *gvoice.SendSMSRequest, opts ...grpc.CallOption) (*gvoice.SendSMSResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gvoice.SendSMSResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.SendSMSRequest, ...grpc.CallOption) (*gvoice.SendSMSResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gvoice.SendSMSRequest, ...grpc.CallOption) *gvoice.SendSMSResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gvoice.SendSMSResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gvoice.SendSMSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GVoiceClient_SendSMS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSMS'
type GVoiceClient_SendSMS_Call struct {
	*mock.Call
}

// SendSMS is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gvoice.SendSMSRequest
//   - opts ...grpc.CallOption
func (_e *GVoiceClient_Expecter) SendSMS(ctx interface{}, in interface{}, opts ...interface{}) *GVoiceClient_SendSMS_Call {
	return &GVoiceClient_SendSMS_Call{Call: _e.mock.On("SendSMS",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GVoiceClient_SendSMS_Call) Run(run func(ctx context.Context, in *gvoice.SendSMSRequest, opts ...grpc.CallOption)) *GVoiceClient_SendSMS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gvoice.SendSMSRequest), variadicArgs...)
	})
	return _c
}

func (_c *GVoiceClient_SendSMS_Call) Return(_a0 *gvoice.SendSMSResponse, _a1 error) *GVoiceClient_SendSMS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GVoiceClient_SendSMS_Call) RunAndReturn(run func(context.Context, *gvoice.SendSMSRequest, ...grpc.CallOption) (*gvoice.SendSMSResponse, error)) *GVoiceClient_SendSMS_Call {
	_c.Call.Return(run)
	return _c
}

// NewGVoiceClient creates a new instance of GVoiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGVoiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GVoiceClient {
	mock := &GVoiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
